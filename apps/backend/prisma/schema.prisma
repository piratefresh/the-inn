generator client {
  provider = "prisma-client-js"
}

generator PrismaTypeGraphQLTypesGenerator {
  provider     = "npx prisma-typegraphql-types-generator"
  modelsOutput = "./src/models"
  enumsOutput  = "./src/typedefs"
  useYarn      = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refreshToken      String? @map("refresh_token")
  accessToken       String? @map("access_token")
  expiresAt         Int?    @map("expires_at")
  tokenType         String? @map("token_type")
  scope             String?
  idToken           String? @map("id_token")
  sessionState      String? @map("session_state")
  oauthTokenSecret  String? @map("oauth_token_secret")
  oauthToken        String? @map("oauth_token")
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId, userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model User {
  id                 String       @id @default(uuid())
  password           String
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  email              String       @unique
  emailVerified      DateTime?
  emailVerifyToken   String?
  passwordResetToken String?
  imageUrl           String?
  firstName          String
  lastName           String
  aboutMe            String?
  experience         Experience   @default(All)
  twitter            String?
  facebook           String?
  discord            String?
  youtube            String?
  status             StatusType   @default(ONLINE)
  memberships        Membership[]
  accounts           Account[]
  hosted             Campaign[]   @relation("game_master")
  reviews            Review[]
  sessions           Session[]

  //Messaging
  sentCampaignMessage    CampaignMessage[] @relation("sentCampaignMessages")
  sentPrivateMessages    PrivateMessage[]  @relation("sentPrivateMessages")
  receivedPrivateMessage PrivateMessage[]  @relation("receivedPrivateMessage")
  Notification           Notification[]

  @@map("users")
}

model Membership {
  role        MembershipRole
  campaignId  String         @map("campaign_id")
  userId      String
  campaign    Campaign       @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  application Application[]

  @@id([campaignId, userId])
}

model Campaign {
  id                    String            @id @default(uuid())
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  title                 String
  summary               String
  jsonSummary           String
  additionalDetails     String?
  jsonAdditionalDetails String?
  note                  String?
  imageUrl              String
  isOnline              Boolean
  campaignType          String            @default("Campaign")
  city                  String?
  state                 String?
  area                  String?
  lat                   Float?
  lng                   Float?
  startDate             DateTime
  endDate               DateTime?
  days                  String[]
  timePeriods           String[]
  timezone              String
  gmId                  String
  experience            Experience        @default(All)
  voipSystem            String?
  gameSystem            String
  virtualTable          String?
  maxSeats              Int               @default(4)
  isActive              Boolean           @default(true)
  puzzles               Difficulty        @default(Any)
  combat                Difficulty        @default(Any)
  roleplay              Difficulty        @default(Any)
  tags                  String[]
  price                 Float?
  gallery               String[]
  gameMaster            User              @relation("game_master", fields: [gmId], references: [id])
  memberships           Membership[]
  campaignMessage       CampaignMessage[]

  @@map("campaigns")
}

model CampaignMessage {
  message           String
  id                String   @id @default(cuid())
  //if there is no sender relation that means it is a message from the server
  sender            User?    @relation(name: "sentCampaignMessages", fields: [senderId], references: [id], onDelete: Cascade)
  senderId          String?
  campaign          Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId        String
  hasAttachment     Boolean  @default(false)
  attachmentType    String?
  attachmentPending Boolean?
  attachmentError   Boolean?
  attachmentKey     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Application {
  id           String     @id @default(cuid())
  membership   Membership @relation(fields: [membershipId, userId], onDelete: Cascade, references: [campaignId, userId])
  membershipId String
  campaignId   String
  userId       String
  message      String
  jsonMessage  String
  fitsSchedule Boolean
  days         String[]
  timePeriods  String[]
  experience   Experience @default(All)
}

model PrivateMessage {
  message           String
  id                String   @id @default(cuid())
  sender            User     @relation(name: "sentPrivateMessages", fields: [senderId], references: [id], onDelete: Cascade)
  recipient         User     @relation(name: "receivedPrivateMessage", fields: [recipientId], references: [id], onDelete: Cascade)
  senderId          String
  recipientId       String
  hasAttachment     Boolean  @default(false)
  attachmentType    String?
  attachmentPending Boolean?
  attachmentError   Boolean?
  attachmentKey     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([senderId])
}

model Review {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rating    Int
  comment   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@map("reviews")
}

model Notification {
  id        String           @id @default(cuid())
  message   String
  type      NotificationType
  relatedId String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  read      Boolean          @default(false)
}

model Counter {
  id      String @id @default(uuid())
  counter Int    @default(0)
}

enum MembershipRole {
  GM
  PLAYER
  PENDING
}

enum Difficulty {
  Low
  Medium
  High
  Any
}

enum Experience {
  Beginner
  Advanced
  All
}

enum StatusType {
  ONLINE
  IDLE
  DND
  OFFLINE
}

enum CampaignType {
  Campaign
  One_Shot
}

enum NotificationType {
  Campaign
  Message
  PrivateMessage
}
