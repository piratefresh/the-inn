generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refreshToken      String? @map("refresh_token")
  accessToken       String? @map("access_token")
  expiresAt         Int?    @map("expires_at")
  tokenType         String? @map("token_type")
  scope             String?
  idToken           String? @map("id_token")
  sessionState      String? @map("session_state")
  oauthTokenSecret  String? @map("oauth_token_secret")
  oauthToken        String? @map("oauth_token")
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId, userId])
  @@map("accounts")
}

model Session {
  id            String   @id @default(cuid())
  session_token String   @unique
  userId        String
  expires       DateTime
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model User {
  id            String       @id @default(uuid())
  password      String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  email         String?      @unique
  emailVerified DateTime?
  imageUrl      String?
  firstName     String
  lastName      String
  experience    Experience   @default(All)
  twitter       String?
  facebook      String?
  discord       String?
  youtube       String?
  status        StatusType   @default(ONLINE)
  memberships   Membership[]
  accounts      Account[]
  hosted        Campaign[]   @relation("game_master")
  reviews       Review[]
  sessions      Session[]

  @@map("users")
}

model Membership {
  role       MembershipRole
  campaignId String         @map("campaign_id")
  userId     String
  campaign   Campaign       @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([campaignId, userId])
}

model Campaign {
  id                    String       @id @default(uuid())
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  title                 String
  summary               String
  jsonSummary           String
  additionalDetails     String?
  jsonAdditionalDetails String?
  note                  String?
  imageUrl              String
  isOnline              Boolean
  city                  String
  state                 String
  lat                   Float
  lng                   Float
  startDate             DateTime
  endDate               DateTime
  days                  String[]
  timePeriods           String[]
  timezone              String
  gmId                  String
  experience            Experience   @default(All)
  voipSystem            String?
  gameSystem            String
  virtualTable          String?
  maxSeats              Int          @default(4)
  puzzles               Difficulty   @default(Any)
  combat                Difficulty   @default(Any)
  roleplay              Difficulty   @default(Any)
  tags                  String[]
  price                 Float?
  gallery               String[]
  gameMaster            User         @relation("game_master", fields: [gmId], references: [id])
  memberships           Membership[]

  @@map("campaigns")
}

model Review {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rating    Int
  comment   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@map("reviews")
}

enum MembershipRole {
  GM
  PLAYER
}

enum Difficulty {
  Low
  Medium
  High
  Any
}

enum Experience {
  Beginner
  Advanced
  All
}

enum StatusType {
  ONLINE
  IDLE
  DND
  OFFLINE
}
