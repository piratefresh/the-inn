{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import \"reflect-metadata\";\r\nimport dotenv from \"dotenv\";\r\nimport { __prod__ } from \"./constants\";\r\nimport { buildTypeDefsAndResolvers } from \"type-graphql\";\r\nimport { createServer } from \"http\";\r\nimport { PrismaClient } from \"@prisma/client\";\r\nimport { UserResolver } from \"@resolvers/user\";\r\nimport { CampaignResolver } from \"@resolvers/campaign\";\r\nimport { ReviewResolver } from \"@resolvers/review\";\r\nimport { CounterResolver } from \"@resolvers/counter\";\r\nimport { PrivateMessageResolver } from \"@resolvers/privateMessage\";\r\nimport express from \"express\";\r\nimport cors from \"cors\";\r\nimport { ApolloServer } from \"@apollo/server\";\r\nimport { makeExecutableSchema } from \"@graphql-tools/schema\";\r\nimport WebSocket, { WebSocketServer as WSWebSocketServer } from \"ws\";\r\nimport { useServer as useWsServer } from \"graphql-ws/lib/use/ws\";\r\nimport { MyContext } from \"@typedefs/MyContext\";\r\nimport { ApolloServerPluginDrainHttpServer } from \"@apollo/server/plugin/drainHttpServer\";\r\nimport { ApolloServerPluginLandingPageLocalDefault } from \"@apollo/server/plugin/landingPage/default\";\r\nimport { expressMiddleware } from \"@apollo/server/express4\";\r\nimport bodyParser, { urlencoded } from \"body-parser\";\r\nimport AblyPubSub from \"ablyPubsub\";\r\nimport { NotificationResolver } from \"@resolvers/notification\";\r\nimport { redis } from \"services/redis\";\r\nimport { sessionMiddleware } from \"middlewares/sessionConfig\";\r\nimport algoliasearch from \"algoliasearch\";\r\nimport { ApplicationResolver } from \"@resolvers/application\";\r\nimport { seedDB, seedDBApplication } from \"../prisma/seed\";\r\n\r\ndotenv.config();\r\n\r\n// PRISMA\r\nconst prisma = new PrismaClient();\r\n\r\n// Connect and authenticate with your Algolia app\r\nconst algoliaClient = algoliasearch(\r\n  process.env.ALGOLIA_APP_ID,\r\n  process.env.ALGOLIA_API_KEY\r\n);\r\nconst theInnIndex = algoliaClient.initIndex(\"dev_campaigns\");\r\n\r\nconst pubsub = new AblyPubSub({ key: process.env.ABLY_API_KEY });\r\n\r\nconst startServer = async () => {\r\n  const PORT = 4000;\r\n  const app = express();\r\n\r\n  const { typeDefs, resolvers } = await buildTypeDefsAndResolvers({\r\n    resolvers: [\r\n      UserResolver,\r\n      CampaignResolver,\r\n      ReviewResolver,\r\n      CounterResolver,\r\n      PrivateMessageResolver,\r\n      NotificationResolver,\r\n      ApplicationResolver,\r\n    ],\r\n    pubSub: pubsub,\r\n  });\r\n\r\n  const schema = makeExecutableSchema({ typeDefs, resolvers });\r\n\r\n  app.set(\"trust proxy\", 1);\r\n\r\n  app.use(\r\n    cors({\r\n      origin: [\r\n        \"http://localhost:3001\",\r\n        \"http://localhost:4000\",\r\n        \"http://localhost:4000/graphql\",\r\n        \"https://the-inn-graphql.vercel.app/\",\r\n        \"https://the-inn-server.herokuapp.com/\",\r\n        \"https://the-inn.herokuapp.com/\",\r\n      ],\r\n      credentials: true,\r\n    })\r\n  );\r\n\r\n  // app.use(rateLimiter);\r\n\r\n  app.use(sessionMiddleware);\r\n\r\n  app.set(\"port\", 3000);\r\n\r\n  const httpServer = createServer(app);\r\n\r\n  const WebSocketServer = WebSocket.Server || WSWebSocketServer;\r\n\r\n  // Creating the WebSocket server\r\n  const wsServer = new WebSocketServer({\r\n    // This is the `httpServer` we created in a previous step.\r\n    server: httpServer,\r\n    // Pass a different path here if app.use\r\n    // serves expressMiddleware at a different path\r\n    path: \"/graphql\",\r\n  });\r\n\r\n  // Hand in the schema we just created and have the\r\n  // WebSocketServer start listening.\r\n  const serverCleanup = useWsServer(\r\n    {\r\n      schema, // Adding a context property lets you add data to your GraphQL operation context\r\n      // authenticate the user and set it on the connection context\r\n      context: ({ extra }) => ({ req: extra.request, prisma, theInnIndex }),\r\n      onConnect: ({ extra }) => {\r\n        sessionMiddleware(extra.request as any, {} as any, () => {});\r\n      },\r\n    },\r\n    wsServer\r\n  );\r\n\r\n  const server = new ApolloServer<MyContext>({\r\n    schema,\r\n    introspection: true,\r\n    csrfPrevention: true,\r\n    plugins: [\r\n      // Disable dosent support graphql-ws\r\n      // ApolloServerPluginLandingPageGraphQLPlayground(),\r\n      ApolloServerPluginLandingPageLocalDefault({ includeCookies: true }),\r\n      ApolloServerPluginDrainHttpServer({ httpServer }),\r\n      // Proper shutdown for the WebSocket server.\r\n      {\r\n        async serverWillStart() {\r\n          return {\r\n            async drainServer() {\r\n              await serverCleanup.dispose();\r\n            },\r\n          };\r\n        },\r\n      },\r\n    ],\r\n  });\r\n\r\n  await server.start();\r\n\r\n  app.use(\r\n    \"/graphql\",\r\n    cors<cors.CorsRequest>({\r\n      origin: [\r\n        \"http://localhost:3001\",\r\n        \"http://localhost:4000\",\r\n        \"http://localhost:4000/graphql\",\r\n        \"https://the-inn-graphql.vercel.app/\",\r\n        \"https://the-inn-server.herokuapp.com/\",\r\n        \"https://the-inn.herokuapp.com/\",\r\n      ],\r\n      credentials: true,\r\n    }),\r\n    bodyParser.json(),\r\n    urlencoded({ extended: false }),\r\n    expressMiddleware(server, {\r\n      context: async ({ req, res }) => {\r\n        return {\r\n          prisma,\r\n          req,\r\n          res,\r\n          redis,\r\n          theInnIndex,\r\n        };\r\n      },\r\n    })\r\n  );\r\n\r\n  // Now that our HTTP server is fully set up, we can listen to it.\r\n  httpServer.listen(PORT, () => {\r\n    console.log(`ðŸš€ Server is now running on http://localhost:${PORT}/graphql`);\r\n    console.log(\r\n      `ðŸš€ Subscription endpoint ready at ws://localhost:${PORT}/graphql`\r\n    );\r\n  });\r\n\r\n  redis.on(\"error\", function (err) {\r\n    console.log(\"Could not establish a connection with redis. \" + err);\r\n  });\r\n  redis.on(\"connect\", function (err) {\r\n    console.log(\"Connected to redis successfully\");\r\n  });\r\n};\r\n// seedDB();\r\n// seedDBApplication();\r\nstartServer().catch((err) => {\r\n  console.error(err);\r\n});\r\n"],"names":["dotenv","config","prisma","PrismaClient","algoliaClient","algoliasearch","process","env","ALGOLIA_APP_ID","ALGOLIA_API_KEY","theInnIndex","initIndex","pubsub","AblyPubSub","key","ABLY_API_KEY","startServer","PORT","app","express","typeDefs","resolvers","buildTypeDefsAndResolvers","UserResolver","CampaignResolver","ReviewResolver","CounterResolver","PrivateMessageResolver","NotificationResolver","ApplicationResolver","pubSub","schema","makeExecutableSchema","set","use","cors","origin","credentials","sessionMiddleware","httpServer","createServer","WebSocketServer","WebSocket","Server","WSWebSocketServer","wsServer","server","path","serverCleanup","useWsServer","context","extra","req","request","onConnect","ApolloServer","introspection","csrfPrevention","plugins","ApolloServerPluginLandingPageLocalDefault","includeCookies","ApolloServerPluginDrainHttpServer","serverWillStart","drainServer","dispose","start","bodyParser","json","urlencoded","extended","expressMiddleware","res","redis","listen","console","log","on","err","catch","error"],"mappings":"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"}