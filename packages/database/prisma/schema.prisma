generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refreshToken       String? @map("refresh_token")
  accessToken        String? @map("access_token")
  expiresAt          Int?    @map("expires_at")
  tokenType          String? @map("token_type")
  scope              String?
  idToken            String? @map("id_token")
  sessionState       String? @map("session_state")
  oauth_token_secret String? @map("oauthTokenSecret")
  oauth_token        String? @map("oauthToken")
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id            String   @id @default(cuid())
  session_token String   @unique
  user_id       String
  expires       DateTime
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model User {
  id            String       @id @default(uuid())
  password      String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  email         String?      @unique
  emailVerified DateTime?
  imageUrl      String?
  firstName     String
  lastName      String
  experience    Experience   @default(All)
  twitter       String?
  facebook      String?
  discord       String?
  youtube       String?
  status        StatusType   @default(ONLINE)
  memberships   Membership[]
  accounts      Account[]
  hosted        Campaign[]   @relation("game_master")
  reviews       Review[]
  sessions      Session[]

  //Messaging
  sentCampaignMessage    CampaignMessage[] @relation("sentCampaignMessages")
  sentPrivateMessages    PrivateMessage[]  @relation("sentPrivateMessages")
  receivedPrivateMessage PrivateMessage[]  @relation("receivedPrivateMessage")

  @@map("users")
}

model Membership {
  role        MembershipRole
  campaign_id String         @map("campaign_id")
  user_id     String
  campaign    Campaign       @relation(fields: [campaign_id], references: [id], onDelete: Cascade)
  user        User           @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([campaign_id, user_id])
}

model Campaign {
  id                      String            @id @default(uuid())
  created_at              DateTime          @default(now())
  updated_at              DateTime          @updatedAt
  title                   String
  summary                 String
  json_summary            String
  additional_details      String?
  json_additional_details String?
  note                    String?
  image_url               String
  is_online               Boolean
  city                    String
  state                   String
  lat                     Float
  lng                     Float
  start_date              DateTime
  end_date                DateTime
  days                    String[]
  time_periods            String[]
  gm_id                   String
  experience              Experience        @default(All)
  voip_system             String?
  virtual_table           String?
  max_seats               Int               @default(4)
  puzzles                 Difficulty        @default(Any)
  combat                  Difficulty        @default(Any)
  roleplay                Difficulty        @default(Any)
  tags                    String[]
  price                   Float?
  gallery                 String[]
  game_master             User              @relation("game_master", fields: [gm_id], references: [id])
  memberships             Membership[]
  CampaignMessage         CampaignMessage[]

  @@map("campaigns")
}

model CampaignMessage {
  message           String
  id                String   @id @default(cuid())
  //if there is no sender relation that means it is a message from the server
  sender            User?    @relation(name: "sentCampaignMessages", fields: [senderId], references: [id], onDelete: Cascade)
  senderId          String?
  campaign          Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId        String
  hasAttachment     Boolean  @default(false)
  attachmentType    String?
  attachmentPending Boolean?
  attachmentError   Boolean?
  attachmentKey     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model PrivateMessage {
  message           String
  id                String   @id @default(cuid())
  sender            User     @relation(name: "sentPrivateMessages", fields: [senderId], references: [id], onDelete: Cascade)
  recipient         User     @relation(name: "receivedPrivateMessage", fields: [recipientId], references: [id], onDelete: Cascade)
  senderId          String
  recipientId       String
  hasAttachment     Boolean  @default(false)
  attachmentType    String?
  attachmentPending Boolean?
  attachmentError   Boolean?
  attachmentKey     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([senderId])
}

model Review {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  rating     Int
  comment    String
  userId     String
  user       User     @relation(fields: [userId], references: [id])

  @@map("reviews")
}

enum MembershipRole {
  GM
  PLAYER
}

enum Difficulty {
  Low
  Medium
  High
  Any
}

enum Experience {
  Beginner
  Advanced
  All
}

enum StatusType {
  ONLINE
  IDLE
  DND
  OFFLINE
}
